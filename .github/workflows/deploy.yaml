name: Deploy Backend to VPS

on:
  push:
    branches:
      - main

env:
  SSH_PORT: 1999
  SSH_USERNAME: ${{ secrets.SSH_USER }}
  SSH_SERVER: ${{ secrets.SSH_HOST }}
  SSH_OPTIONS: -o StrictHostKeyChecking=yes
  DEST_DIR: /var/www/clients/client0/web3/web/symblog #Répertoire du backend sur le serveur
  HTACCESS_PATH: /var/www/clients/client0/web3/web/.htaccess # Chemin du fichier .htaccess
  BACKUP_DIR: /var/www/clients/client0/web3/web/backup # Répertoire où seront stockées les sauvegardes

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure SSH
        run: |
          echo "Configuring SSH..."
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          echo "Host deploy
            HostName $SSH_SERVER
            User $SSH_USERNAME
            Port $SSH_PORT
            IdentityFile ~/.ssh/id_rsa
            StrictHostKeyChecking yes" > ~/.ssh/config

          # Configuration spécifique pour GitHub
          #echo "Host github.com
          #  HostName github.com
          #  User git
          #  IdentityFile ~/.ssh/vps_git_clone
          #  IdentitiesOnly yes
          #  PreferredAuthentications publickey" >> ~/.ssh/config

          ssh-keyscan -H -p 1999 $SSH_SERVER >> ~/.ssh/known_hosts
          ssh-keyscan -H github.com >> ~/.ssh/known_hosts

          chmod 700 ~/.ssh
          chmod 600 ~/.ssh/known_hosts
          chmod 600 ~/.ssh/config

      - name: Test SSH Connection
        run: ssh deploy "echo 'Connexion SSH réussie !'"

      - name: Enable maintenance mode
        run: |
          echo "Activating maintenance mode..."
          ssh deploy << 'EOF'
          mv /var/www/clients/client0/web3/web/symblog/public/.htaccess /var/www/clients/client0/web3/web/symblog/public/.htaccess.bak
          mv /var/www/clients/client0/web3/web/symblog/public/.htaccess.maintenance /var/www/clients/client0/web3/web/symblog/public/.htaccess
          EOF

      - name: Reload Apache
        run: |
          echo "Reloading Apache..."
          ssh deploy "sudo systemctl reload apache2"

      - name: sleep
        run: sleep 5

      - name: Backup Database
        run: |
          echo "Backing up database..."
          ssh deploy << 'EOF'
          mkdir -p /var/www/clients/client0/web3/web/symblog/backup
          mysqldump -u db_user -p'db_password' database_name > /var/www/clients/client0/web3/web/symblog/backups/db_backup_$(date +%F_%T).sql
          EOF

      - name: Backup Source Code and Templates
        run: |
          echo "Backing up src/ and templates/..."
          ssh deploy << 'EOF'
          mkdir -p /var/www/clients/client0/web3/web/symblog/backup
          tar -czf /var/www/clients/client0/web3/web/symblog/backup/src_templates_backup_$(date +%F_%T).tar.gz -C /var/www/clients/client0/web3/web/symblog src templates
          EOF

      - name: Deploy Application with Rsync
        run: |
          echo "Deploying application..."
          rsync -avz --delete --exclude='var/' --exclude='vendor/' --exclude='cache/' --exclude='.env.local' --exclude='.env' ./ deploy:/var/www/clients/client0/web3/web/symblog/

      - name: Validate Deployment
        run: |
          echo "Checking if application is running..."
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://your-domain.com)
          if [[ "$RESPONSE" -ne 200 ]]; then
            echo "Application is not responding! Rolling back..."
            exit 1
          fi
          echo "Deployment successful!"

      - name: Clear cache and optimize autoload
        run: |
          echo "Clearing Symfony cache..."
          ssh deploy << 'EOF'
          cd /var/www/clients/client0/web3/web/symblog
          php bin/console cache:clear --env=prod
          php bin/console cache:warmup --env=prod
          composer dump-autoload --optimize
          EOF

      - name: Check and install Composer dependencies
        run: |
          echo "Checking Composer dependencies..."
          ssh deploy << 'EOF'
          cd /var/www/clients/client0/web3/web/symblog
          git fetch --unshallow || true
          if git diff --name-only origin/main | grep -q "composer.lock"; then
            echo "Composer.lock changed, installing dependencies..."
            composer install --no-dev --optimize-autoloader
          else
            echo "No Composer changes detected, skipping install."
          fi
          EOF

      - name: Run Doctrine migrations if necessary
        run: |
          echo "Checking for pending migrations..."
          ssh deploy << 'EOF'
          cd /var/www/clients/client0/web3/web/symblog
          if php bin/console doctrine:migrations:status | grep -q "New Migrations"; then
            echo "New migrations found, running migrations..."
            php bin/console doctrine:migrations:migrate --no-interaction
          else
            echo "No new migrations detected."
          fi
          EOF

      #- name: sleep
      #  run: sleep 30

      - name: Rollback Source Code and Templates
        if: failure()
        run: |
          echo "Rolling back src/ and templates/..."
          ssh deploy << 'EOF'
          tar -xzf /var/www/clients/client0/web3/web/symblog/backup/src_templates_backup_$(ls -t /var/www/clients/client0/web3/web/symblog/backup | head -n 1) -C /var/www/clients/client0/web3/web/symblog
          EOF

      - name: Disable maintenance mode
        if: always()
        run: |
          echo "Disabling maintenance mode..."
          ssh deploy << 'EOF'
          mv /var/www/clients/client0/web3/web/symblog/public/.htaccess /var/www/clients/client0/web3/web/symblog/public/.htaccess.maintenance
          mv /var/www/clients/client0/web3/web/symblog/public/.htaccess.bak /var/www/clients/client0/web3/web/symblog/public/.htaccess
          EOF

      - name: sleep
        run: sleep 5

      - name: Reload Apache
        run: |
          echo "Reloading Apache..."
          ssh deploy "sudo systemctl reload apache2"
