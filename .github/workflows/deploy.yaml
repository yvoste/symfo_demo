name: Deploy Backend to VPS

on:
  push:
    branches:
      - main

env:
  SSH_PORT: 1999
  SSH_USERNAME: ${{ secrets.SSH_USER }}
  SSH_SERVER: ${{ secrets.SSH_HOST }}
  SSH_OPTIONS: -o StrictHostKeyChecking=yes
  DEST_DIR: /var/www/clients/client0/web3/web/symblog
  HTACCESS_PATH: /var/www/clients/client0/web3/web/symblog/public/
  BACKUP_DIR: /var/www/clients/client0/web3/web/backups
  DATABASE_NAME: ${{ secrets.DATABASE_NAME }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetches full history for accurate comparisons

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          cat > ~/.ssh/config << EOF
          Host deploy
            HostName $SSH_SERVER
            User $SSH_USERNAME
            Port $SSH_PORT
            IdentityFile ~/.ssh/id_rsa
            StrictHostKeyChecking yes
          EOF

          ssh-keyscan -H -p $SSH_PORT $SSH_SERVER >> ~/.ssh/known_hosts
          ssh-keyscan -H github.com >> ~/.ssh/known_hosts

          chmod 700 ~/.ssh
          chmod 600 ~/.ssh/known_hosts ~/.ssh/config

      - name: Test SSH Connection
        run: ssh deploy "echo 'SSH connection successful!'"

      - name: Enable Maintenance Mode
        run: |
          ssh deploy << 'EOF'
          [ -f "$HTACCESS_PATH.htaccess" ] && mv "$HTACCESS_PATH.htaccess" "$HTACCESS_PATH.htaccess.bak"
          [ -f "$HTACCESS_PATH.htaccess.maintenance" ] && mv "$HTACCESS_PATH.htaccess.maintenance" "$HTACCESS_PATH.htaccess"
          EOF

      - name: Backup Database
        env:
          DB_PASSWORD_FILE: ~/.ssh/db_password
        run: |
          echo "${{ secrets.DB_PASSWORD }}" > ~/.ssh/db_password
          chmod 600 ~/.ssh/db_password
          ssh deploy "mysqldump -u ${{ secrets.DB_USER }} --password-file=$DB_PASSWORD_FILE $DATABASE_NAME > $BACKUP_DIR/db_backup_$(date +%F_%T).sql"
          ssh deploy "rm ~/.ssh/db_password"

      - name: Backup Source Code and Templates
        run: |
          ssh deploy << 'EOF'
          tar -czf "$BACKUP_DIR/src_templates_backup_$(date +%F_%T).tar.gz" -C "$DEST_DIR" src templates
          EOF

      - name: Deploy Application with Rsync
        run: |
          rsync -avz \
            --exclude='var/' \
            --exclude='vendor/' \
            --exclude='cache/' \
            --exclude='.env.local' \
            --exclude='.env' \
            ./ deploy:$DEST_DIR/

      - name: Validate Deployment
        run: |
          RESPONSE=$(curl -L -s -o /dev/null -w "%{http_code}" https://testartep.org/symblog)
          if [[ "$RESPONSE" -ne 200 ]]; then
            echo "Application not responding. Rolling back..."
            exit 1
          fi
          echo "Deployment successful!"

      - name: Update Dependencies and Clear Cache
        run: |
          ssh deploy << 'EOF'
          cd "$DEST_DIR"
          php bin/console cache:clear
          php bin/console cache:warmup
          composer dump-autoload --optimize
          EOF

      - name: Check and Install Composer Dependencies
        run: |
          ssh deploy << 'EOF'
          cd "$DEST_DIR"
          git fetch --unshallow || true
          if git diff --name-only origin/main | grep -q "composer.lock"; then
            composer install --no-dev --optimize-autoloader
          fi
          EOF

      - name: Run Doctrine Migrations
        run: |
          ssh deploy << 'EOF'
          cd "$DEST_DIR"
          if php bin/console doctrine:migrations:status -no-ansi | grep -q "New Migrations"; then
            php bin/console doctrine:migrations:migrate --no-interaction
          fi
          EOF

      - name: Rollback Source Code and Templates
        if: failure()
        run: |
          ssh deploy << 'EOF'
          tar -xzf "$(ls -t "$BACKUP_DIR"/src_templates_backup_*.tar.gz | head -n 1)" -C "$DEST_DIR"
          EOF

      - name: Disable Maintenance Mode
        if: always()
        run: |
          ssh deploy << 'EOF'
          [ -f "$HTACCESS_PATH.htaccess" ] && mv "$HTACCESS_PATH.htaccess" "$HTACCESS_PATH.htaccess.maintenance"
          [ -f "$HTACCESS_PATH.htaccess.bak" ] && mv "$HTACCESS_PATH.htaccess.bak" "$HTACCESS_PATH.htaccess"
          EOF

      - name: Cleanup Old Backups
        if: always()
        run: |
          ssh deploy << 'EOF'
          find "$BACKUP_DIR" -type f -name "db_backup_*" -mtime +7 -delete
          find "$BACKUP_DIR" -type f -name "src_templates_backup_*" -mtime +7 -delete
          EOF
